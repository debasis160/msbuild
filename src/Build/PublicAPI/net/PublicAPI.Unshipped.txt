Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
Microsoft.Build.Execution.ProjectImportInstance
Microsoft.Build.Execution.ProjectImportInstance.FullPath.get -> string
Microsoft.Build.Execution.ProjectImportInstance.LastWriteTimeWhenRead.get -> System.DateTime
Microsoft.Build.Execution.ProjectImportInstance.ProjectImportInstance() -> void
Microsoft.Build.Execution.ProjectImportInstance.ProjectImportInstance(string fullPath, System.DateTime lastWriteTimeWhenRead) -> void
Microsoft.Build.Execution.ProjectInstance.Imports.get -> System.Collections.Generic.IReadOnlyList<Microsoft.Build.Execution.ProjectImportInstance>
Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
Microsoft.Build.FileSystem.FindPredicate
Microsoft.Build.FileSystem.FindTransform<TResult>
Microsoft.Build.FileSystem.IDirectoryCache
Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
Microsoft.Build.FileSystem.IDirectoryCacheFactory
Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
