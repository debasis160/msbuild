Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
Microsoft.Build.Execution.BuildManager.LoadCachedResults(string[] cacheFiles) -> System.Collections.Generic.Dictionary<Microsoft.Build.Execution.BuildRequestData, Microsoft.Build.Execution.BuildResult>
Microsoft.Build.Execution.BuildRequestData.InputResultsCacheFiles.get -> string[]
Microsoft.Build.Execution.BuildRequestData.InputResultsCacheFiles.set -> void
Microsoft.Build.Execution.BuildRequestData.OutputResultsCacheFile.get -> string
Microsoft.Build.Execution.BuildRequestData.OutputResultsCacheFile.set -> void
Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
Microsoft.Build.FileSystem.FindPredicate
Microsoft.Build.FileSystem.FindTransform<TResult>
Microsoft.Build.FileSystem.IDirectoryCache
Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
Microsoft.Build.FileSystem.IDirectoryCacheFactory
Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
Microsoft.Build.Graph.GraphBuildCacheFilePathDelegate
Microsoft.Build.Graph.GraphBuildRequestData.GraphBuildCacheFilePath.get -> Microsoft.Build.Graph.GraphBuildCacheFilePathDelegate
Microsoft.Build.Graph.GraphBuildRequestData.GraphBuildRequestData(Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.ICollection<string> targetsToBuild, Microsoft.Build.Execution.HostServices hostServices, Microsoft.Build.Execution.BuildRequestDataFlags flags, System.Collections.Generic.ICollection<Microsoft.Build.Graph.ProjectGraphNode> startingNodes, Microsoft.Build.Graph.ProjectGraphNodeDirection direction = Microsoft.Build.Graph.ProjectGraphNodeDirection.Current, Microsoft.Build.Graph.GraphBuildCacheFilePathDelegate graphBuildCacheFilePathDelegate = null) -> void
Microsoft.Build.Graph.GraphBuildRequestData.IsolateProjects.get -> bool
Microsoft.Build.Graph.GraphBuildRequestData.ProjectGraphNodeDirection.get -> Microsoft.Build.Graph.ProjectGraphNodeDirection
Microsoft.Build.Graph.GraphBuildRequestData.StartingGraphNodes.get -> System.Collections.Generic.ICollection<Microsoft.Build.Graph.ProjectGraphNode>
Microsoft.Build.Graph.ProjectGraphNodeDirection
Microsoft.Build.Graph.ProjectGraphNodeDirection.Current = 0 -> Microsoft.Build.Graph.ProjectGraphNodeDirection
Microsoft.Build.Graph.ProjectGraphNodeDirection.Down = 1 -> Microsoft.Build.Graph.ProjectGraphNodeDirection
Microsoft.Build.Graph.ProjectGraphNodeDirection.Up = 2 -> Microsoft.Build.Graph.ProjectGraphNodeDirection
Microsoft.Build.Graph.ProjectGraphVisitor
Microsoft.Build.Graph.ProjectGraphVisitor.FindAll(Microsoft.Build.Graph.ProjectGraphNode graphNode, Microsoft.Build.Graph.ProjectGraphNodeDirection direction) -> System.Collections.Generic.IEnumerable<Microsoft.Build.Graph.ProjectGraphNode>
Microsoft.Build.Graph.ProjectGraphVisitor.ProjectGraphVisitor() -> void
static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
